/* Positioning (floats, inline, etc */
.parent {
  padding: 5px;
  background-color: #00aaff;
}

.child {
  padding: 5px;
}

.child-one {
  background-color: rgb(116, 255, 116);
  position: relative; /* Changes the position relative to the original position (static) */
  left: 10px;
  /* top: 5px; moves the element 5px down */
  /* right: 5px; moves the element 5px left */
  /* bottom: 5px; moves the element 5px up */
}

.child-two {
  background-color: rgb(248, 117, 117);
  position: absolute; /* positions to the coordinates of the nearest ancestor element (in this case, 0px,0px coordinate of the body) that has an absolute position, and if an absolute positioned element has no positioned ancestors, it uses the document body  */
  top: 0px;
  left: 0px;
  /* ^positions the element to the 0px,0px coordinate of the body of the page */
}

/* Floats */
.child-three {
  background-color: rgb(255, 116, 232);
}

#building-image {
  float: right;
  margin: 10px;
}

/* Display */
.parent-0 {
}

.parent-1 {
  padding: 5px;
  background-color: #00aaff;
}

.child-one-1 {
  background-color: rgb(116, 255, 116);
}

.child-two-2 {
  background-color: rgb(248, 117, 117);
}

.child-three-3 {
  background-color: rgb(255, 116, 232);
}

/* Flexbox */
.flexbox-container {
  display: flex; /* changes the direction the content flows | sub-properties: row, row-reverse, column, column reverse  */
  flex-direction: column;
  justify-content: space-evenly; /* defines the alignment along the main axis */
  flex-wrap: wrap; /* sets whether flex items are forced onto one line or can wrap onto multiple lines (can only be put in flex container or parent element) */
  align-items: center; /* defines the alignment along the axis of the flex-direction */
}

.flexbox-item {
  width: 200px;
  margin: 10px;
  border: 3px solid #333;
  background-color: #dfdfdf;
}

.flexbox-item-1 {
  min-height: 100px;
}

.flexbox-item-2 {
  min-height: 200px;
}

.flexbox-item-3 {
  min-height: 300px;
}

/* Grid and Nesting */
.wrapper {
  display: grid;
  grid-template-columns: 70% 30%; /* specifies the number (and the widths) of columns in a grid layout. Number of columns/rows is the same number of units of measurenments given */
  grid-gap: 16px; /* sets the gaps (gutters) between rows and/or columns */
}

.wrapper > div {
  background: #eee;
  padding: 1em;
}
.wrapper > div:nth-child(odd) {
  background: #ddd;
}

#wrapper {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr; /* represents a fraction of the available space in the grid container | can also be typed as repeat(3, 1fr)  */
  grid-gap: 16px;
  grid-auto-rows: 100px; /* sets a size for the rows in a grid container */
  grid-auto-rows: minmax(
    100px,
    auto
  ); /* create grids that flex according to some parameters */
}

#wrapper > div {
  background: #eee;
  padding: 1em;
}

#wrapper > div:nth-child(odd) {
  background: #ddd;
}

#external-css {
  color: red;
}

/* Grouping */
.flexbox-cheat,
.grid-cheat {
  text-align: left;
}

#inline-css,
#external-css {
  text-align: center;
}

/* Pseudo Elements */
.required::before {
  content: "";
  display: block;
  width: 10px;
  height: 10px;
  background-color: red;
}
.required::after {
  content: "*Needed";
  font-size: 10px;
}

/* Shorthand properties */
#shorthand {
  border: 10px solid blue; /* this is the shorthand property of a border that's 10px on each side, made of solid lines, and is blue */
}

/* Background images */
.bg-image {
  padding: 20em;
  background-image: url(./lightning.jpg);
  background-repeat: no-repeat;
  outline: 2px solid black;
  background-size: 40% 300px;
  background-position: 10px 10px;
}

/* Specificity */
h1 {
  color: blue !important; /* Specificity code: 0, 0, 0, 1 */
}

.header {
  color: red; /* Specificity code: 0, 0, 1, 0 * | if there are more than one class names, the last class name will be applied since they all have the same specificity code */
}

#header-id {
  color: black; /* Specificity code: 0, 1, 0, 0 */
}

/* Inline styles are more specific than ids */
/* ids are more specific than classes */
/* classes are more specific than element names */
/* the !important property overrides all of these rules */

/* Display */
#div-1 {
  display: block; /* uses the entire width given to it; forces a new line above it and/or below it */
  background-color: red;
}

#span-1 {
  display: inline; /* take up the minimum amount of space possible */
  background-color: cyan;
}

#span-2 {
  background-color: purple;
}

#div-2 {
  display: none; /* Removes the element as if it was never there */
  background-color: green;
}

#img {
  display: inline-block; /* exactly the same as an inline element, except you can edit the size */
  width: 300px;
  height: 300px;
}

/* flex and grid displays were already explained */

/* Pseudo Classes */
p:hover {
  color: red;
}

div:hover {
  color: blue;
}
